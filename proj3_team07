import csv
import numpy as np
from datetime import datetime

def file_reader(file_name):
    #Eventually replaced with an array of data, csv file used to limit API callings and potential errors
    with open(file_name, 'r') as file:
        csv_reader = csv.reader(file)
        next(csv_reader)
        time = []
        temp = []
        prec = []
        for row in csv_reader:
            print(row[0])
            time.append(row[0])
            temp.append(row[1])
            prec.append(row[2])
        return time, temp, prec
    
def time_conversion(time_array):
    #Converts time to an array of past (mostly irrelevant), present (time 0), and future (incremental by the hour)
    now = datetime.now()
    
    format_time = "%d-%d-%02d %02d:00" % (now.year, now.month, now.day, now.hour)
    
    new_time = []
    
    found = 0
    counter = 0
    
    for time in time_array:
        if time == format_time and found != 1:
            new_time.append(counter)
            found = 1
        elif found == 1:
            counter += 1
            new_time.append(counter)
        else:
            new_time.append(-1)
    return new_time
            
def rain_weight(time, prec, temp):
    water_added = 0.0
    water_absorbed = 0.3
    #Approximately 30-40% of water is absorbed by soil
    
    for value in enumerate(time):
        if value[1] >= 0:
            added = (water_absorbed * float(prec[value[0]])) #directly adds water
            added /= (np.log(value[1] + 1) + 1) #reduces water based on time
            added = np.power(added, (1 + ((float(temp[value[0]]) - 20) / 50)))
            water_added += added
            #If it is currently raining or will be raining soon, then the water added should be close to the same
            #For times further away, then unless a lot of water is coming, some water might be needed
            if value[1] == 0 and value[0] != 0:
                water_added += (water_absorbed * float(prec[value[0] - 1])) / 3
                #Water can take around 30 minutes to absorb into the soil, so we should take into account the previous hour
    return water_added


def main():
    #Call weatherApiData.py every hour to update this data, replace the csv file for an array of data
    #CSV file is currently utilized to limit problems with the API used and for interpreting the API data easily

    time, temp, prec = file_reader("output.csv")
    time = time_conversion(time)
    water_added = rain_weight(time, prec, temp)
    print(water_added * 12) #convert to mL
    #Have info sent to the humidity sensor
    
main()

#---------------------------------------

import requests
import csv


def get_api(key, days, location):
    response = requests.get(f"http://api.weatherapi.com/v1/forecast.json?key={key} &q={location}&days={days}&aqi=no&alerts=no")
    if response.status_code == 200:
        return response.json()
    else:
        return 0

def get_weather_array(data, day, hour):
    time = data["forecast"]["forecastday"][day]["hour"][hour]["time"]
    temp = data["forecast"]["forecastday"][day]["hour"][hour]["temp_c"]
    rain = data["forecast"]["forecastday"][day]["hour"][hour]["precip_mm"]
    return [time, temp, rain]

def file_maker(filename, weather_data):
    with open(filename, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(weather_data)

def main():
    key = "8f82b9fa311f47f5b58170125240611"
    
    location = "West Lafayette"
    days = 7
    filename = 'output.csv'

    weather_data = [["Date", "Temp (C)", "Precipitation (mm)"]]
    
    data = get_api(key, days, location)
    if data == 0:
        print("API not accessible")
        return
    
    i = 0
    while i < days:
        n = 0
        while n < len(data["forecast"]["forecastday"][i]["hour"]):
            weather_data.append(get_weather_array(data, i, n))
            n+=1
        i += 1
        
    file_maker(filename, weather_data)
    
main()


#---------------------------------------

from microbit import *
import robotbit_library as r
import radio

#Get value from sprinklerDetermineToggle.py
rain_water = 1.944

#Estimated water for current plant
water_needed = 90

#Determined from data based on sensor
sens_0 = 1024.78
approx_mult = -0.223123
approx_exp = 1.66441

radio.config(group=7)
radio.on()

while True:
    approximate_water = pow((pin1.read_analog() - sens_0) / (approx_mult), 1/approx_exp)
    total_water = approximate_water + rain_water
    
    if total_water < water_needed:
        radio.send("Signal")

#---------------------------------------

from microbit import *
import radio

radio.config(group=7)
radio.on()
while True:
    display.set_pixel(0,0,0)
    message = radio.receive()
    if message:
        display.set_pixel(0,0,9)
